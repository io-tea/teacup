type Cup implements Node {
  # The ID of the object.
  id: ID!
  greyscaleLevels(before: String, after: String, first: Int, last: Int): GreyscaleConnection
  humidityLevels(before: String, after: String, first: Int, last: Int): HumidityConnection
  liquidLevels(before: String, after: String, first: Int, last: Int): LiquidConnection
  temperatures(before: String, after: String, first: Int, last: Int): TemperatureConnection
}

type CupConnection {
  pageInfo: PageInfo!
  edges: [CupEdge]!
}

type CupEdge {
  # The item at the end of the edge
  node: Cup

  # A cursor for use in pagination
  cursor: String!
}

# The `DateTime` scalar type represents a DateTime
# value as specified by
# [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
scalar DateTime

type Greyscale implements Node {
  # The ID of the object.
  id: ID!
  timestamp: DateTime
  value: Int
  cupId: Int
  cup: Cup
}

type GreyscaleConnection {
  pageInfo: PageInfo!
  edges: [GreyscaleEdge]!
}

type GreyscaleEdge {
  # The item at the end of the edge
  node: Greyscale

  # A cursor for use in pagination
  cursor: String!
}

type Humidity implements Node {
  # The ID of the object.
  id: ID!
  timestamp: DateTime
  value: Int
  cupId: Int
  cup: Cup
}

type HumidityConnection {
  pageInfo: PageInfo!
  edges: [HumidityEdge]!
}

type HumidityEdge {
  # The item at the end of the edge
  node: Humidity

  # A cursor for use in pagination
  cursor: String!
}

type Liquid implements Node {
  # The ID of the object.
  id: ID!
  timestamp: DateTime
  value: Int
  cupId: Int
  cup: Cup
}

type LiquidConnection {
  pageInfo: PageInfo!
  edges: [LiquidEdge]!
}

type LiquidEdge {
  # The item at the end of the edge
  node: Liquid

  # A cursor for use in pagination
  cursor: String!
}

# An object with an ID
interface Node {
  # The ID of the object.
  id: ID!
}

type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # The ID of the object
  node(id: ID!): Node
  allCups(before: String, after: String, first: Int, last: Int): CupConnection
}

type Temperature implements Node {
  # The ID of the object.
  id: ID!
  timestamp: DateTime
  value: Int
  cupId: Int
  cup: Cup
}

type TemperatureConnection {
  pageInfo: PageInfo!
  edges: [TemperatureEdge]!
}

type TemperatureEdge {
  # The item at the end of the edge
  node: Temperature

  # A cursor for use in pagination
  cursor: String!
}

